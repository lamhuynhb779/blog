image: lorisleiva/laravel-docker:latest

# The job's name
composer:
  # The job's state (build, test or deploy)
  stage: build
  # What to run on the job
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - cp .env.example .env
    - php artisan key:generate
  artifacts:
    # (Optional) Give it an expiration date,
    # after that period you won't be able to
    # download them via the UI anymore
    expire_in: 30 days
    # Define what to output from the job.
    paths:
      - vendor/
      - .env
  cache:
    # The variable CI_COMMIT_REF_SLUG
    # refers to the slug of the branch.
    # For example: `master` for the master branch
    # We use the `composer` suffix to avoid conflicts with
    # the `npm` cache that we'll define next
    key: ${CI_COMMIT_REF_SLUG}-composer
    # Define what to cache
    paths:
      - vendor/

# The job's name
npm:
  # Same stage as `composer` so that they run in parallel.
  stage: build
  # Cache the `node_modules` folder
  # using the `npm` suffix on the key.
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - node_modules/
  # Install and compile
  script:
    - npm install
    - npm run production
  # Provide the other jobs of the pipeline with
  # the node dependencies and the compiled assets.
  artifacts:
    expire_in: 30 days
    paths:
      - node_modules/
      - public/css/
      - public/js/

# The job's name
phpunit:
  stage: test
  # List of jobs from which it will download the artifacts.
  dependencies:
    - composer
  script:
    - phpunit --coverage-text --colors=never

# The job's name
codestyle:
  stage: test
  dependencies: []
  script:
    - phpcs --standard=PSR2 --extensions=php --ignore=app/Support/helpers.php app

# The job's name
staging:
  stage: deploy

  # Pseudocode describing roughly what we're trying to achive
  script:
    - *init_ssh
    - *change_file_permissions
    - php artisan deploy dev.yourdomain.com -s upload

  # Define an GitLab environment.
  # This makes GitLab aware of your latest deployments
  # and provides a button to check out the provided url.
  environment:
    name: staging
    url: http://dev.yourdomain.com

  # (Optional) Only deploy if we're in the master branch
  # Other branches will only build and test.
  only:
    - master

# The job's name
production:
  stage: deploy
  script:
    - *init_ssh
    - *change_file_permissions
    - php artisan deploy yourdomain.com -s upload
  environment:
    name: production
    url: http://yourdomain.com
  when: manual
  only:
    - master
